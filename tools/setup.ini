; Here are the applications to install
;   - comment the ones you do not want
;   - uncomment the extra ones you want
[install]
  ; Check SSL certificate when downloading tarball (0=no check, 1=check)
  sslcheck = 1

  ; Path to certificate bundle to use (that can include %APPS_ROOT%)
  ; cacert = "%APPS_ROOT%/ca-bundle.crt"

  ; Default applications installed anyway
  app = gitbash       ; Git for Windows
  app = git           ; Common git config and aliases
  app = shell         ; Common bash/zsh config, scripts
  app = portableapps  ; PortableApps Platform
  app = python        ; Python 3

  ; Extra recommanded applications
  app = node          ; Node.js
  app = putty         ; PuTTY suite: ssh client (PuTTY), ssh keygen (PuTTYgen), etc.
  app = superputty    ; Tabbed PuTTY
  app = cmder         ; Tabbed multi console emulator
  app = mobaxterm     ; Tabbed multi console emulator and network tools
  app = tabby         ; A terminal for more modern age
  app = autohotkey    ; Keyboard macro program
  app = vscode        ; Visual Studio Code

  ; Extra application
  ; app = pacman      ; Linux package manager, allow to get to the next level for a Linux env
  ; app = nvm         ; Node.js version manager
  ; app = java        ; Java SDK 15
  ; app = elastic     ; ELK stack (Elasticsearch, Logstash, Kibana) which needs java
  ; app = gradle      ; Gradle Build Tool
  ; app = pycharm     ; PyCharm Community Edition
  ; app = xampp       ; Apache web server solution stack package
  ; app = cygwin      ; POSIX-compatible environment
  ; app = python2     ; Python 2.7

  ; Custom application folder (that can include %APPS_ROOT%)
  custom-app-folder = "%APPS_ROOT%/extra"

  ; Each extra app must have in extra_app_folder:
  ;   - a folder with the same name as the app
  ;   - a setup.sh file in that folder
  ;   - a entry point function called setup_ followed by the name of the app

  ; custom-app = custom

[gitbash]
  ; List of msys tool available here http://repo.msys2.org/msys/x86_64/ to add
  ; Format is <name of binary file>:<tarball>
  msystool = tree:tree-1.8.0-1-x86_64.pkg.tar.xz
  msystool = perl:perl-5.32.0-2-x86_64.pkg.tar.zst
  msystool = python:python-3.8.6-1-x86_64.pkg.tar.zst
  msystool = pip:python-pip-20.2.2-1-any.pkg.tar.zst
  msystool = zsh:zsh-5.8-3-x86_64.pkg.tar.xz
  msystool = msys-event-2-1-7.dll:libevent-2.1.12-2-x86_64.pkg.tar.zst
  msystool = tmux:tmux-3.1.c-1-x86_64.pkg.tar.zst
  msystool = wget:wget-1.20.3-1-x86_64.pkg.tar.xz
  msystool = sshpass:sshpass-1.06-1-x86_64.pkg.tar.xz
  msystool = zip:zip-3.0-3-x86_64.pkg.tar.xz

[git]
  user =
  email =

[putty]
  ; Put the remote machine on which you want putty to connect to
  remote-machine =

  ; Path to a file that contains only the password to connect to the remote machine
  ; This could be good to fully automate the installation but be aware to remove that file after
  pass-file = "%APPS_ROOT%/pass.txt"

[shell]
  ; Set to 1 to install tmux configuration, 0 otherwise
  tmux = 0
  ; Set to 1 to install oh-my-zsh if zsh installed, 0 otherwise
  oh-my-zsh = 1
  ; Set to 1 to install bash-it, 0 otherwise
  bash-it = 1

[oh-my-zsh]
  ; oh-my-zsh theme to use, can be set to "random"
  theme = "common-env"
  plugins = "globalias git git-prompt history-substring-search zsh_reload"

[bash-it]
  ; bash-it theme to use, can be left empty not to use any
  theme =

[python]
  modules = "pylint autopep8"

[pacman]
  ; List of pacman packages to add

  ; Default package installed anyway
  package = bash
  package = man

  ; Tools already available by default
  package = curl
  package = rsync
  package = tree
  package = wget

  ; Extra tool
  package = tmux
  package = zsh
  package = sshpass

  ; Packages needed for C/C++ development
  ; package = make
  ; package = cmake
  ; package = mingw-w64-x86_64-toolchain

[java]
  ; version can be 8, 11 or 16 (default)
  version = 16

[node]
  ; List of npm packages to install globally, you can add or remove the ones you want
  package = yarn
  ; package = clang-format

[nvm]
  ; you can pass nvm install parameter to install all versions you want
  install = --lts ; install latest lts node.js version
  ; install = --default 12 ; install latest node.js version 12 and set it as default

[vscode]
  ; List of extensions to be installed in VSCode, notice that you can add local .vsix files
  ; You can also put '-' in front of it if you dont want it installed
  ; You can also add some extension from vsix files, notice the format: "<extension_path>":extension_name

  ; EXTENSIONS TO INSTALL BY DEFAULT

  extension = eamodio.gitlens                               ; Git Lens
  extension = tyriar.shell-launcher                         ; Multi terminal launcher
  extension = ms-vscode.notepadplusplus-keybindings         ; Notepad++ keymap binding

  extension = editorconfig.editorconfig                     ; Support for .editorconfig
  extension = esbenp.prettier-vscode                        ; Many language formatter: JavaScript · TypeScript · Flow · JSX · JSON / CSS · SCSS · Less / HTML · Vue · Angular / GraphQL · Markdown · YAML
  extension = redhat.vscode-yaml                            ; YAML Language Support by Red Hat
  extension = dotjoshjohnson.xml                            ; XML tools

  extension = davidanson.vscode-markdownlint                ; Markdown linter
  extension = shd101wyy.markdown-preview-enhanced           ; Markdown preview with Github style
  extension = alanwalk.markdown-toc                         ; Markdown Table of content generation

  extension = foxundermoon.shell-format                     ; Shell formatter
  extension = timonwong.shellcheck                          ; Shell linter

  extension = ms-python.python                              ; Python

  ; EXTRA EXTENSIONS NOT INSTALLED BY DEFAULT

  extension = -nicolasvuillamy.vscode-groovy-lint           ; Groovy/Jenkinsfile linter/formatter

  extension = -johnpapa.vscode-peacock                      ; Colorize VSCode

  extension = -josee9988.changelog-and-markdown-snippets    ; Changelog/Markdown snippets

  extension = -mads-hartmann.bash-ide-vscode                ; Bash IDE
  extension = -rogalmic.bash-debug                          ; Bash debugger

  extension = -dbaeumer.vscode-eslint                       ; Javascript linter
  extension = -dzannotti.vscode-babel-coloring              ; Javascript Babel syntax coloring
  extension = -msjsdiag.debugger-for-chrome                 ; Javascript debugger for Chrome
  extension = -firefox-devtools.vscode-firefox-debug        ; Javascript debugger for Firefox

  extension = -xaver.clang-format                           ; C++ formatter
  extension = -ms-vscode.cpptools                           ; C++
  extension = -llvm-vs-code-extensions.vscode-clangd        ; C++ IDE feature using clangd
  extension = -twxs.cmake                                   ; CMake
  extension = -ms-vscode.cmake-tools                        ; CMake Tools

  extension = -ms-azuretools.vscode-docker                  ; Docker
  extension = -ms-vscode-remote.remote-ssh                  ; Remote SSH
  extension = -ms-vscode-remote.vscode-remote-extensionpack ; Remote development pack: ms-vscode-remote.remote-ssh, ms-vscode-remote.remote-wsl and ms-vscode-remote.remote-containers
  extension = -lfurzewaddock.vscode-wsl-workspacefolder     ; WSL extensions
  extension = -MS-vsliveshare.vsliveshare                   ; Live sharing
  extension = -ms-vscode.powershell                         ; PowerShell
  extension = -waderyan.gitblame                            ; Git blame

  extension = -garmin.private-extension-manager             ; Private extensions

  ; LOCAL EXTENSIONS TO INSTALL FROM .VSIX FILE
  ; notice the format: "<extension_path>":extension_name

  extension = -"%APPS_ROOT%/vscode_settings/extension.vsix":extension_name

  ; Allow to set personal path folder with vscode settings (main settings, extensions, key binding)
  extension-settings = "%APPS_ROOT%/vscode_settings"

# If you want to override anything set in this generated content, you can set it at the end of the file.

# Check config here https://git-scm.com/docs/git-config to know how to configure all the sections
# eg. look for core.pager if you want to know about pager option of [core] section
# eg. look for color.ui if you want to know about ui option of [color] section

# colors can be: normal, black, red, green, yellow, blue, magenta, cyan or white
# attributes can be: bold, dim, ul, blink, reverse, italic, or strike
# or also the negative: nobold, nodim, noul, noblink, noreverse, noitalic, or nostrike

[color]
  ui = true

[color "status"]
  added = bold yellow
  changed = green
  untracked = cyan

[color "branch"]
  current = reverse white
  local = yellow
  remote = cyan

[color "diff"]
  meta = blue black bold

[core]
  pager = less -FRSX
  filemode = true
  symlinks = true
  autocrlf = input
  whitespace = trailing-space,-space-before-tab,tab-in-indent,cr-at-eol
  longpaths = true

[i18n]
  logOutputEncoding = utf-8

[pull]
  ff = only
  rebase = true

[rebase]
  autosquash = true

[push]
  default = upstream

[alias]
  cv = ! echo 'gitconfig 2.0.10'
  alias = ! git --no-pager config --get-regexp '^alias\\.' | sed -e 's/^alias\\.//' -e 's/\\ /\\ =\\ /' # Display all the aliases
  v = ! git --version
  mg = ! git cmd merge --no-edit

  # DISPLAY ALIAS
  dry = ! GIT_CMD_DRY=1 git # Only display the command for the given alias, do not run it (eg. type "git dry mg" --> it displays "git merge --no-edit")

  info = ! "f() { \
      echo \"$(git rev-list --count --all) commits overall\"; \
      `#echo \"$(git rev-list --count HEAD) commits in HEAD\";` \
      echo \"$(git lsr 2>/dev/null | wc -l) files in HEAD\"; \
    }; f"

  # CONFIG
  gconf = ! vi $HOME/.gitconfig # edit global git config
  conf  = ! vi .git/config # edit repo git config
  cfg   = conf
  user  = ! git cmd config --global user.name # git user <username> --> set your username
  guser = ! git cmd config --global --get user.name # get your git user name
  mail  = ! git cmd config --global user.email # git mail <email> --> set your email
  gmail = ! git cmd config --global --get user.email # get your git user email
  set-auto-login = ! "f(){ \
      type git_auto_login &>/dev/null; \
      if [ $? -eq 0 ]; then \
        git_auto_login \"$@\"; \
        return $ret; \
      else \
        echo 'Functionality not available !'; \
        return 1; \
      fi; \
    }; f" # git login-auto [machine [login [password]]] --> create ~/.netrc file to auto login

  # STATUS
  st  = ! "cd -- ${GIT_PREFIX:-.}; git cmd status" # basic status
  sta = ! "cd -- ${GIT_PREFIX:-.}; git st --ignored=matching" # basic status + ignored files
  sts = ! "cd -- ${GIT_PREFIX:-.}; git st --untracked-files=no" # basic status without untracked files
  s   = ! "cd -- ${GIT_PREFIX:-.}; param=; git versionmajor2 && param='--ahead-behind --show-stash --find-renames'; git st $param --short --branch" # short status
  sa  = s --ignored=matching # short status with ignored files
  ss  = s --untracked-files=no # short status without untracked files

  # ADD
  a    = ! "cd -- ${GIT_PREFIX:-.}; git cmd add --verbose" # add files
  au   = ! "cd -- ${GIT_PREFIX:-.}; git a --update" # add all modified files
  aa   = ! "cd -- ${GIT_PREFIX:-.}; git a --all" # add all files
  ax   = ! "cd -- ${GIT_PREFIX:-.}; git a --chmod=+x" # add files with executable status (useful when using git on filesystem not supporting this filemode)
  aci  = ! "cd -- ${GIT_PREFIX:-.}; git au && git ci" # git aci 'commit message' -> add updated files and commit with 'commit message'
  aca  = ! "cd -- ${GIT_PREFIX:-.}; git au && git ca" # add updated files and amend it to the previous commit
  chmodx = ! "f() { \
      cd -- ${GIT_PREFIX:-.}; \
      local regexp=\"$1\"; \
      if [ -z \"$regexp\" ]; then \
        regexp='\\.(sh|py|awk)$'; \
      fi; \
      git ls-files | grep -E \"$regexp\" | xargs git ax; \
    }; f" # add executable mode to all files in the repository matching the given regexp (default='\.(sh|py|awk)$')

  addu = ! "cd -- ${GIT_PREFIX:-.}; git au"
  add-update = ! "cd -- ${GIT_PREFIX:-.}; git au"
  add-chmodx = ! "cd -- ${GIT_PREFIX:-.}; gti ax"
  add-all = ! "cd -- ${GIT_PREFIX:-.}; git aa"

  # COMMIT
  ci   = ! git cmd commit -m # git ci 'commit message'
  ca   = ! "f() { local user=$(git config --global --get user.name); local lc=$(git log -1 --pretty=format:'%an'); [ ! \"$user\" = \"$lc\" ] && echo \"The last commit was made by $lc, not you ($user) !!! Please create a new commit, do not amend:\" && echo \"git ci '<your commit message>'\" && return 1; git cmd commit --amend --no-edit "$@"; }; f" # append to the previous commit
  cav  = ! git cmd commit -a -v -m # git cav 'commit message' --> automatically add all modified files in the commit
  acf  = ! git au && git ca && git pf # amend all modified files to the last commit and push force to origin
  acfu = ! git au && git ca && git pfu # amend all modified files to the last commit and push force to upstream

  commit-amend             = ! git ca
  add-commit-push          = ! git acf
  add-commit-push-upstream = ! git acfu

  # CHECKOUT
  co    = ! git cmd checkout
  codb  = ! git co $(git defbro) # checkout default branch from origin
  codbu = ! git co $(git defbru) # checkout default branch from upstream

  checkout-default-branch = ! git codb
  checkout-default-branch-upstream = ! git codbu

  # SUBMODULES
  clones = ! git cmd clone --recursive # git clones <repo_url> --> clone the repo and its submodules
  subm   = ! "f() { git cmd submodule update --init --recursive \"$@\"; }; f" # update all submodules or the given one
  submr  = ! git module-action reset # update all submodules or the given one and discard any change
  submu  = ! git module-action upgrade # upgrade the submodules to their latest version
  module-action = ! "f() { \
    local action=$1; \
    shift; \
    [ $# -gt 1 ] && git echoe \"Only one path of submodule (or none for all) is accepted\" && return 1; \
    local path=$1; \
    [ -n \"$path\" ] && [ ! -e \"$path\" ] && git echoe \"'$path' does not exist\" && return 1; \
    if [ -n \"$path\" ]; then \
      case $action in \
      reset) git subm \"$path\" && git echoi \"cd $path\" && cd \"$path\" && git cmd reset --hard HEAD;; \
      upgrade) git cmd submodule update --remote \"$path\"  && git echoi \"cd $path\" && cd \"$path\" && git cmd submodule foreach git subm;; \
      *) git echoe \"Unknown action '$action'\" && return 1;; \
      esac; \
    else \
      case $action in \
      reset) git subm && git cmd submodule foreach git cmd reset --hard HEAD;; \
      upgrade) git cmd submodule update --remote && git cmd submodule foreach git subm;; \
      *) git echoe \"Unknown action '$action'\" && return 1;; \
      esac; \
    fi; }; f"

  submodule-update = ! git subm
  submodule-reset = ! git submr
  submodule-upgrade = ! git submu

  # CHERRY-PICK
  cp  = ! git cmd cherry-pick
  cps = ! git cp --skip
  cpc = ! git cp --continue
  cpa = ! git cp --abort

  # LS
  ls  = ! "cd -- ${GIT_PREFIX:-.}; git cmd ls-tree HEAD --abbrev" # list files from . or the given path
  lsr = ! "cd -- ${GIT_PREFIX:-.}; git ls -rt" # recursively list files from . or the given path
  lso = ! "cd -- ${GIT_PREFIX:-.}; git cmd ls-files --directory --no-empty-directory -o" # list untracked files
  lsi = ! "cd -- ${GIT_PREFIX:-.}; git cmd ls-files --directory --no-empty-directory --exclude-standard -i" # List files in the repository that matche an ignore rule

  ls-all = ! "cd -- ${GIT_PREFIX:-.}; git lsr"
  ls-untracked = ! "cd -- ${GIT_PREFIX:-.}; git lso"
  ls-ignored = ! "cd -- ${GIT_PREFIX:-.}; git lsi"

  # REMOTE REPOSITORIES
  remotes = ! git cmd remote -v # list remote repositories
  upstream = ! git cmd remote add upstream # git upstream <repo_url> --> add upstream repo
  origin = ! git cmd remote set-url # git origin <repo_url> --> change origin repo

  # FETCH
  f      = ! "f(){ git cmd fetch --prune \"$@\"; git cmd fetch --force --tags \"$@\"; } ; f" # fetch HEAD and tags from origin
  fu     = ! git f upstream # fetch from upstream
  fa     = ! git f --all # fetch all remotes
  fro    = ! git f && git rbo && git subm # fetch and rebase from origin and update submodules
  frdo   = ! git f && git rbdo && git subm # fetch and rebase from origin default branch and update submodules
  fru    = ! git fu && git rbu && git subm # fetch and rebase from upstream and update submodules
  frdu   = ! git fu && git rbdu && git subm # fetch and rebase from upstream default branch and update submodules

  fetch-origin                  = ! git f
  fetch-upstream                = ! git fu
  fetch-all                     = ! git fa
  fetch-rebase-origin           = ! git fro
  fetch-rebase-origin-default   = ! git frdo
  fetch-rebase-upstream         = ! git fru
  fetch-rebase-upstream-default = ! git frdu

  # PULL
  pullr  = ! git cmd pull --rebase # pull and rebase your change on top
  pullu  = ! git cmd pull upstream $(git brcurrent) # pull from upstream (really apply the commits retrieved from upstream)
  pullur = ! git pullu --rebase # pull from upsrteam and rebase your change on top of it

  # REBASE
  rb      = ! git cmd rebase
  rbo     = ! git rb origin/$(git brcurrent) $(git brcurrent) # rebase from origin
  rbdo    = ! git rb origin/$(git defbro) $(git brcurrent) # rebase from origin default branch
  rbu     = ! git rb upstream/$(git brcurrent) $(git brcurrent) # rebase from upstream
  rbdu    = ! git rb upstream/$(git defbru) $(git brcurrent) # rebase from upstream default branch
  rbcol   = ! git co --theirs # during rebase conflict, select local changes
  rbcor   = ! git co --ours # during rebase conflict, select changes from remote
  rba     = ! git rb --abort # abort rebase
  rbc     = ! git rb --continue # continue rebase
  rbi     = ! nb=$1 && shift && git rb -i HEAD~$nb # git rbi x --> interactively manage x last commits
  rebasei = ! git rbi

  rebase-origin           = ! git rbo
  rebase-origin-default   = ! git rbdo
  rebase-upstream         = ! git rbu
  rebase-upstream-default = ! git rbdu
  rebase-checkout-remote  = ! git rbcor
  rebase-checkout-local   = ! git rbcol
  rebase-abort            = ! git rba
  rebase-continue         = ! git rbc
  rebase-interactive      = ! git rbi

  # PUSH
  p      = ! git cmd push
  pt     = ! git p --tags # push tags
  ptf    = ! git pt --force # force push tags
  ptu    = ! git pt upstream # push tags to upstream
  ptfu   = ! git ptf upstream # force push tags to upstream
  pushf  = ! git p --force # force push (useful when using git ca)
  pf     = ! git pushf
  pushu  = ! git p upstream $(git brcurrent) # push to upstream
  pu     = ! git pushu
  pushuf = ! git p --force upstream $(git brcurrent) # force push to upstream
  puf    = ! git pushuf
  pfu    = ! git puf
  pa     = ! "f(){ git p \"$@\" && git pt \"$@\"; }; f" # push changes and tags
  paf    = ! "f(){ git p \"$@\" && git pt \"$@\"; }; f --force" # force push changes and tags
  pau    = ! "f(){ git pu \"$@\" && git ptu \"$@\"; }; f" # push changes and tags to upstream
  pafu   = ! "f(){ git pu \"$@\" && git ptu \"$@\"; }; f --force" # force push changes and tags to upstream

  # TAG
  t   = ! git cmd tag
  td  = ! git t --delete # git td <tag_name> --> remove local tag
  tdo = ! git cmd push --delete origin # git tdo <tag_name> --> remove tag from origin
  tdu = ! git cmd push --delete upstream # git tdo <tag_name> --> remove tag from origin

  # BRANCH
  brcur = ! git cmd symbolic-ref --short HEAD # gives current branch
  br    = ! git cmd branch -vv # verbose display of local branches
  bra   = ! git br -a # verbose display of all branches
  brn   = "! f(){ \
    [ $# -ne 1 ] && git echoe \"You must provide one and only one agrument: the branch name to create\" && return 1; \
    git co -b $1 && git p -u origin $1; \
  }; f" # git brn <branch_name> --> create branch locally and push it to origin
  brc   = ! git co --track # git brc origin/<branch_name> --> checkout remote branch and track it
  brcd  = ! git brc origin/$(git defbro) # checkout default origin branch and track it
  brd   = ! git cmd branch -D # git brd <branch_name> [<branch_name> ...] --> delete given branches from local
  brdo  = ! git cmd push --delete origin # git brdo <branch_name> [<branch_name> ...] --> delete given remote branches from origin
  brdu  = ! git cmd push --delete upstream # git brdu <branch_name> [<branch_name> ...] --> delete given remote branches from upstream
  bro   = ! git remotebr origin # list origin branches
  bru   = ! git remotebr upstream # list upstream branches

  branch-local            = ! git br
  branch-all              = ! git bra
  branch-checkout         = ! git brc
  branch-checkout-default = ! git brcd
  branch-new              = ! git brn

  # RESET COMMITS
  rstc    = ! git cmd reset . # reset current changes ready to commit
  rst     = ! git cmd reset
  resets  = ! nb=$1 && shift && git rst --soft HEAD~$nb # git resets x --> softly remove x commits
  rs      = ! git resets
  reseth  = ! nb=$1 && shift && git rst --hard HEAD~$nb # git reseth x --> remove x commits
  rsh     = ! git reseth
  rmc     = ! commit=$1 && shift && git rb --onto $commit^ $commit # git rmc c96d2c8 --> remove commit c96d2c8
  #git rebase --onto HEAD~1^ HEAD~1 --> remove second commit

  reset-repo = ! git rstc
  reset-commit-last  = ! git rs
  remove-commit-last = ! git rsh
  remove-commit      = ! git rmc

  # RESET BRANCH
  rsb   = ! git rst --hard # git resetb <branch_name> -> hardly reset to branch_name
  rsbo  = ! git rst --hard origin/$(git brcurrent) # hardly reset to origin
  rsbu  = ! git rst --hard upstream/$(git brcurrent) # hardly reset to upstream
  rsbdo = ! git rst --hard origin/$(git defbro) # hardly reset to origin default branch
  rsbdu = ! git rst --hard upstream/$(git defbru) # hardly reset to upstream default branch

  reset-hard-branch           = ! git rsb
  reset-hard-origin           = ! git rsbo
  reset-hard-origin-default   = ! git rsbdo
  reset-hard-upstream         = ! git rsbu
  reset-hard-upstream-default = ! git rsbdu

  # DIFF
  df     = ! "cd -- ${GIT_PREFIX:-.}; git cmd diff"
  dc     = ! "cd -- ${GIT_PREFIX:-.}; git df --cached" # diff of added modif
  dw     = ! "cd -- ${GIT_PREFIX:-.}; git df --word-diff --color-words"
  dis    = ! "cd -- ${GIT_PREFIX:-.}; git df --ignore-all-space"
  dfs    = ! git df --stat # diff with files stat
  dfh    = ! git cmd show HEAD # show diff of last HEAD commit
  dfsh   = ! git cmd show --stat HEAD # show stat diff of last HEAD commit
  dfl    = ! git echoi 'Diff from local to origin' && git df origin/$(git brcurrent)..HEAD
  dfr    = ! git echoi 'Diff from origin to local' && git df HEAD..origin/$(git brcurrent)
  dfsl   = ! git dfl --stat
  dfsr   = ! git dfr --stat
  dflu   = ! git hasupstream && git echoi 'Diff from local to upstream' && git df upstream/$(git brcurrent)..HEAD
  dfru   = ! git hasupstream && git echoi 'Diff from upstream to local' && git df HEAD upstream/$(git brcurrent)
  dfslu  = ! git dflu --stat
  dfsru  = ! git dfru --stat
  dfdl   = ! git echoi "Diff from local to origin default branch $(git defbro)" && git df origin/$(git defbro)..HEAD
  dfdr   = ! git echoi "Diff from origin default branch $(git defbro) to local" && git df HEAD..origin/$(git defbro)
  dfsdl  = ! git dfdl --stat
  dfsdr  = ! git dfdr --stat
  dfdlu  = ! git hasupstream && git echoi "Diff from local to upstream default branch $(git defbru)" && git df upstream/$(git defbru)..HEAD
  dfdru  = ! git hasupstream && git echoi "Diff from upstream default branch $(git defbru) to local" && git df HEAD upstream/$(git defbru)
  dfsdlu = ! git dfdlu --stat
  dfsdru = ! git dfdru --stat

  diff-staged = ! git dc
  diff-stat-upstream = ! git dfslu
  diff-stat-upstream-default = ! git dfsdlu
  diff-upstream = ! git dflu
  diff-upstream-default = ! git dfdlu
  diff-stat-origin = ! git dfsl
  diff-stat-origin-default = ! git dfsdl
  diff-origin = ! git dfl
  diff-origin-default = ! git dfdl

  # LAST COMMITER
  lc     = ! git cmd log -1 --pretty=format:'%an' # Last commiter
  lcr    = ! git lc origin/$(git brcurrent) # Last commiter from origin
  lcru   = ! git lc upstream/$(git brcurrent) # Last commiter from upstream
  lcd    = ! git lc origin/$(git defbro) # Last commiter from origin default branch
  lcdu   = ! git lc upstream/$(git defbru) # Last commiter from upstream default branch
  lcb    = ! branch=$1 && shift && git lc origin/$branch # Last commiter from given branch from origin
  lcbu   = ! branch=$1 && shift && git lc upstream/$branch # Last commiter from given branch from upstream

  # LOG
  lgc     = ! git cmd log --graph --date=short --pretty=format:'%C(green)%ad%Creset %C(auto)%h%Creset %C(bold blue)%><(7,trunc)%an%Creset %C(auto)%d%Creset %s - %C(green)(%C(bold blue)%an%Creset %C(green)%ar)%Creset' # full current branch log with better view on last committer
  lg      = ! git cmd log --graph --date=short --pretty=format:'%C(green)%ad%Creset %C(auto)%h%Creset %C(auto)%d%Creset %s - %C(green)(%C(bold blue)%an%Creset %C(green)%ar)%Creset' # full current branch log
  lg5     = ! git --no-pager lg -5 && echo # limit to 5 commits
  lg10    = ! git --no-pager lg -10 && echo # limit to 10 commits
  lg20    = ! git --no-pager lg -20 && echo # limit to 20 commits
  lg40    = ! git --no-pager lg -40 && echo # limit to 40 commits
  lga     = ! git lg --all  # full all branches log
  lga5    = ! git --no-pager lga -5 && echo # limit to 5 commits
  lga10   = ! git --no-pager lga -10 && echo # limit to 10 commits
  lga20   = ! git --no-pager lga -20 && echo  # limit to 20 commits
  lga40   = ! git --no-pager lga -40 && echo  # limit to 40 commits
  lgl     = ! git echoi "Local changes not in origin/$(git brcurrent)" && git lg origin/$(git brcurrent)..HEAD # Local changes compared to origin
  lglu    = ! git hasupstream && git echoi "Local changes not in upstream/$(git brcurrent)" && git lg upstream/$(git brcurrent)..HEAD # Local changes compared to upstream
  lgr     = ! git echoi "Remote changes from origin/$(git brcurrent)" && git lg HEAD..origin/$(git brcurrent) # Changes from origin
  lgru    = ! git hasupstream && git echoi "Remote changes from upstream/$(git brcurrent)" && git lg HEAD..upstream/$(git brcurrent)  # Changes from upstream
  lglr    = ! git lgl && echo && git lgr # Show local and origin changes
  lglru   = ! git lglu && echo && git lgru # Show local and upstream changes
  lgb     = ! branch=$1 && shift && git hasbranch $branch && git echoi "Changes in $branch not in HEAD" && git lg HEAD..$branch # Changes from given local branch to HEAD
  lgbh    = ! branch=$1 && shift && git hasbranch $branch && git echoi "Changes in HEAD not in $branch" && git lg $branch..HEAD # Changes from HEAD to given local branch
  lgbl    = ! branch=$1 && shift && git hasbrancho $branch && git echoi "Changes in origin/$branch not in HEAD" && git lg HEAD..origin/$branch # Changes from given origin branch to HEAD
  lgbr    = ! branch=$1 && shift && git hasbrancho $branch && git echoi "Changes in HEAD not in origin/$branch" && git lg origin/$branch..HEAD # Changes from HEAD to given origin branch
  lgblu   = ! git hasupstream && branch=$1 && shift && git hasbranchu $branch && git echoi "Changes in HEAD not in upstream/$branch" && git lg upstream/$branch..HEAD # Changes from HEAD to given upstream branch
  lgbru   = ! git hasupstream && branch=$1 && shift && git hasbranchu $branch && git echoi "Changes in upstream/$branch not in HEAD" && git lg HEAD..upstream/$branch # Changes from given upstream branch to HEAD
  lgdl    = ! git echoi "Changes in HEAD not in default origin branch $(git defbro)" && git lg origin/$(git defbro)..HEAD # Changes from HEAD to default origin branch
  lgdr    = ! git echoi "Changes in origin default branch $(git defbro) not in HEAD" && git lg HEAD..origin/$(git defbro) # Changes from default origin branch to HEAD
  lgdlu   = ! git echoi "Changes in HEAD not in default upstream branch $(git defbru)" && git lg upstream/$(git defbru)..HEAD # Changes from HEAD to default upstream branch
  lgdru   = ! git echoi "Changes in upstream default branch $(git defbru) not in HEAD" && git lg HEAD..upstream/$(git defbru) # Changes from default upstream branch to HEAD
  lgdlr   = ! git lgdl && echo && git lgdr # Show local and default origin changes
  lgdlru  = ! git lgdlu && echo && git lgdru # Show local and default upstream changes
  lguil   = ! gitk origin/$(git brcurrent)..HEAD
  lguir   = ! gitk HEAD..origin/$(git brcurrent)
  lguidl  = ! gitk origin/$(git defbro)..HEAD
  lguidr  = ! gitk HEAD..origin/$(git defbro)
  lguilu  = ! gitk upstream/$(git brcurrent)..HEAD
  lguiru  = ! gitk HEAD..upstream/$(git brcurrent)
  lguidlu = ! gitk upstrem/$(git defbru)..HEAD
  lguidru = ! gitk HEAD..upstream/$(git defbru)

  log-current                   = ! git lg
  log-all                       = ! git lga
  log-local-upstream            = ! git lglru
  log-local-origin              = ! git lglr
  log-local-default-upstream    = ! git lgdlru
  log-local-default-origin      = ! git lgdlr
  log-ui-local-upstream         = ! git lguil
  log-ui-upstream-local         = ! git lguir
  log-ui-local-default-upstream = ! git lguidl
  log-ui-default-upstream-local = ! git lguidr

  # TOOLS
  brcurrent = symbolic-ref --short HEAD # gives current branch
  defbr = ! repo=$1 && (shift || (echo "defbr needs the remote repo" >&2 && exit 1)) && shift && git remote show $repo | grep 'HEAD branch' | cut -d: -f2 | tr -d '[:space:]' # Get default remote branch
  defbro = ! git defbr origin
  defbru = ! git defbr upstream
  remotebr = ! repo=$1 && (shift || (echo "remotebr needs the remote repo" >&2 && exit 1)) && shift && git ls-remote --heads $repo | tr '[[:space:]]' '\n' | grep refs/heads | cut -d'/' -f3 # List remote branch
  hasupstream = ! test $(git remote | grep -cE '^upstream$') -eq 1 || (echo "You need to setup the upstream" >&2 && exit 1) # Check if upstream is set
  hasbranch = ! branch=$1 && shift 1 && test $(git branch --list | tr '[:space:]' '\n' | grep -cE "^$branch$") -eq 1 || (echo "Branch $branch does not exist" && exit 1) || shift 666 # Check if local branch exist
  hasremotebranch = ! repo=$1 && branch=$2 && shift 2 && test $(git remotebr $repo | grep -cE "^$branch$") -eq 1 || (echo "Branch $repo/$branch does not exist" && exit 1) || shift 666 # Check if remote branch exist
  hasbrancho = ! branch=$1 && shift 1 && git hasremotebranch origin $branch # Check if branch from origin exist
  hasbranchu = ! branch=$1 && shift 1 && git hasremotebranch upstream $branch # Check if branch from upstream exist
  versionmajor = ! git --version | cut -d' ' -f3 | cut -d'.' -f1
  versionmajor2 = ! test $(git versionmajor) -ge 2

  # Tools to display full git command, more complex than expected !!!
  # It is too colorize the output on Linux, macOS, Windows, on different terminal (tty or not)
  # TODO: to optimize, each display takes too much time !!!
  cmd = ! "f(){ \
      cd -- ${GIT_PREFIX:-.}; \
      if [ \"$GIT_CMD_NOECHO\" = \"1\" ]; then \
        :; \
      elif [ \"$GIT_CMD_NOCOLOR\" = \"1\" ]; then \
        echo \"------~~~=<[ git $@ ]>=~~~------\"; \
      else \
        git echocolor 32 \"git $@\"; \
      fi; \
      if [ ! \"$(git echocmd)\" = \"echo\" ]; then \
        color='-c color.ui=always'; \
      fi; \
      [ ! \"$GIT_CMD_DRY\" = \"1\" ] && git $color \"$@\"; \
    } ; f" # echo with cmd color (green) and run cmd
  echoi = ! "f(){ \
      git echocolor 39 \"$@\"; \
    } ; f" # echo with info color (default)
  echoe = ! "f(){ \
      git echocolor 31 \"$@\"; \
    } ; f" # echo with error color (red)
  debugo = ! git cmd cecho && echo && git cmd echocmd && echo # echo debug info about the echo used
  cecho = ! "f(){ \
      val=$(echo -en 'x' 2>&1); \
      if [ $? -eq 0 ] && [ \"$val\" = \"x\" ]; then \
        echo echo | tr -d '\n'; \
        return; \
      fi; \
      if [ \"$(uname -s)\" = \"Darwin\" ]; then \
        val=$(gecho -en 'x' 2>&1); \
        if [ $? -eq 0 ] && [ \"$val\" = \"x\" ]; then \
          echo gecho | tr -d '\n'; \
          return; \
        fi; \
        return; \
      fi; \
      echo echo | tr -d '\n'; \
    }; f" # command to use for echo (can be gecho for Mac)
  decho = ! "f() { \
      ECHO=$(git cecho); \
      if [ -n \"$ECHO\" ]; then \
        echo $ECHO | tr -d '\n'; \
        return; \
      fi; \
      echo echo | tr -d '\n';\
    }; f" # get the default echo command
  echo = ! "f() { echo \"$@\" >&2 ;}; f" # simply echo what is given
  echotty = ! "f() { \
      color=$1; \
      shift; \
      ECHO=$(git decho); \
      SED=sed; \
      [ "$(echo $ECHO | cut -b 1)" = "g" ] && SED=gsed; \
      param=\"$@\"; `# Worst trick even to allow to display ' around format for git log commands`; \
      param=\"$(echo \"$@\" | $SED -re \"s#%C\\(green\\)%ad%#'%C\\(green\\)%ad%#g\" -e \"s#%ar\\)%Creset#%ar\\)%Creset'#g\")\"; \
      $ECHO -e "\\\\e[${color}m$param\\\\e[0m" >&2; \
    }; f" # echo given arguments with given color for tty terminal
  echobash = ! "f() { \
      color=$1; \
      shift; \
      ECHO=$(git decho); \
      SED=sed; \
      [ "$(echo $ECHO | cut -b 1)" = "g" ] && SED=gsed; \
      param=\"$@\"; `# Worst trick even to allow to display ' around format for git log commands`; \
      param=\"$(echo \"$@\" | $SED -re \"s#%C\\(green\\)%ad%#'%C\\(green\\)%ad%#g\" -e \"s#%ar\\)%Creset#%ar\\)%Creset'#g\")\"; \
      bash -c \"$ECHO -e \\\"\\e[${color}m$param\\e[0m\\\" >&2\"; \
    }; f" # echo given arguments with given color using bash
  echocmd = ! "f() { \
      ECHO=$(git cecho); \
      if [ -z \"$ECHO\" ]; then \
        echo echo | tr -d '\n'; \
        return; \
      fi; \
      val=$(tty 2>/dev/null); \
      case \"$val\" in \
        \"not a tty\") \
          $ECHO echobash | tr -d '\n'; \
          return; \
        ;; \
        /dev/*) \
          $ECHO echotty | tr -d '\n'; \
          return; \
        ;; \
        *) \
          $ECHO echo | tr -d '\n'; \
          return; \
        ;; \
      esac; \
    }; f" # gives the echo command to use based on the current terminal info
  echocolor = ! "f() { \
      color=$1; shift; \
      cmd=\"$(git echocmd)\"; \
      if [ ! \"$cmd\" = \"echo\" ]; then \
        cmd=\"$cmd $color\"; \
      fi; \
      git $cmd \"$@\"; \
    }; f" # echo given info with given color
